package com.libtop.weituR.dao.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table book.
*/
public class BookDao extends AbstractDao<Book, Long> {

    public static final String TABLENAME = "book";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Author = new Property(2, String.class, "author", false, "AUTHOR");
        public final static Property Cover = new Property(3, String.class, "cover", false, "COVER");
        public final static Property Isbn = new Property(4, String.class, "isbn", false, "ISBN");
        public final static Property Favorate = new Property(5, boolean.class, "favorate", false, "FAVORATE");
        public final static Property Want_see = new Property(6, boolean.class, "want_see", false, "WANT_SEE");
        public final static Property See_pre = new Property(7, boolean.class, "see_pre", false, "SEE_PRE");
        public final static Property Update_time = new Property(8, long.class, "update_time", false, "UPDATE_TIME");
    };

    private DaoSession daoSession;


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'book' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'AUTHOR' TEXT NOT NULL ," + // 2: author
                "'COVER' TEXT NOT NULL ," + // 3: cover
                "'ISBN' TEXT NOT NULL ," + // 4: isbn
                "'FAVORATE' INTEGER NOT NULL ," + // 5: favorate
                "'WANT_SEE' INTEGER NOT NULL ," + // 6: want_see
                "'SEE_PRE' INTEGER NOT NULL ," + // 7: see_pre
                "'UPDATE_TIME' INTEGER NOT NULL );"); // 8: update_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'book'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getAuthor());
        stmt.bindString(4, entity.getCover());
        stmt.bindString(5, entity.getIsbn());
        stmt.bindLong(6, entity.getFavorate() ? 1l: 0l);
        stmt.bindLong(7, entity.getWant_see() ? 1l: 0l);
        stmt.bindLong(8, entity.getSee_pre() ? 1l: 0l);
        stmt.bindLong(9, entity.getUpdate_time());
    }

    @Override
    protected void attachEntity(Book entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // author
            cursor.getString(offset + 3), // cover
            cursor.getString(offset + 4), // isbn
            cursor.getShort(offset + 5) != 0, // favorate
            cursor.getShort(offset + 6) != 0, // want_see
            cursor.getShort(offset + 7) != 0, // see_pre
            cursor.getLong(offset + 8) // update_time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setAuthor(cursor.getString(offset + 2));
        entity.setCover(cursor.getString(offset + 3));
        entity.setIsbn(cursor.getString(offset + 4));
        entity.setFavorate(cursor.getShort(offset + 5) != 0);
        entity.setWant_see(cursor.getShort(offset + 6) != 0);
        entity.setSee_pre(cursor.getShort(offset + 7) != 0);
        entity.setUpdate_time(cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Book entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Book entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
