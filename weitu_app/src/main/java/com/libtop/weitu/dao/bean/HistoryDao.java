package com.libtop.weitu.dao.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.


/**
 * DAO for table history.
 */
public class HistoryDao extends AbstractDao<History, Long>
{

    public static final String TABLENAME = "history";


    /**
     * Properties of entity History.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties
    {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Url = new Property(2, String.class, "url", false, "URL");
        public final static Property Isbn = new Property(3, String.class, "isbn", false, "ISBN");
        public final static Property Auth = new Property(4, String.class, "auth", false, "AUTH");
        public final static Property Report = new Property(5, String.class, "report", false, "REPORT");
        public final static Property Lid = new Property(6, String.class, "lid", false, "LID");
        public final static Property Publisher = new Property(7, String.class, "publisher", false, "PUBLISHER");
        public final static Property Update_time = new Property(8, long.class, "update_time", false, "UPDATE_TIME");
    }


    ;

    private DaoSession daoSession;


    public HistoryDao(DaoConfig config)
    {
        super(config);
    }


    public HistoryDao(DaoConfig config, DaoSession daoSession)
    {
        super(config, daoSession);
        this.daoSession = daoSession;
    }


    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists)
    {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'history' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'URL' TEXT NOT NULL ," + // 2: url
                "'ISBN' TEXT NOT NULL ," + // 3: isbn
                "'AUTH' TEXT NOT NULL ," + // 4: auth
                "'REPORT' TEXT," + // 5: report
                "'LID' TEXT NOT NULL ," + // 6: lid
                "'PUBLISHER' TEXT NOT NULL ," + // 7: publisher
                "'UPDATE_TIME' INTEGER NOT NULL );"); // 8: update_time
    }


    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists)
    {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'history'";
        db.execSQL(sql);
    }


    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, History entity)
    {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null)
        {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getUrl());
        stmt.bindString(4, entity.getIsbn());
        stmt.bindString(5, entity.getAuth());

        String report = entity.getReport();
        if (report != null)
        {
            stmt.bindString(6, report);
        }
        stmt.bindString(7, entity.getLid());
        stmt.bindString(8, entity.getPublisher());
        stmt.bindLong(9, entity.getUpdate_time());
    }


    @Override
    protected void attachEntity(History entity)
    {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }


    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset)
    {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }


    /**
     * @inheritdoc
     */
    @Override
    public History readEntity(Cursor cursor, int offset)
    {
        History entity = new History( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getString(offset + 1), // name
                cursor.getString(offset + 2), // url
                cursor.getString(offset + 3), // isbn
                cursor.getString(offset + 4), // auth
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // report
                cursor.getString(offset + 6), // lid
                cursor.getString(offset + 7), // publisher
                cursor.getLong(offset + 8) // update_time
        );
        return entity;
    }


    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, History entity, int offset)
    {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setUrl(cursor.getString(offset + 2));
        entity.setIsbn(cursor.getString(offset + 3));
        entity.setAuth(cursor.getString(offset + 4));
        entity.setReport(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLid(cursor.getString(offset + 6));
        entity.setPublisher(cursor.getString(offset + 7));
        entity.setUpdate_time(cursor.getLong(offset + 8));
    }


    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(History entity, long rowId)
    {
        entity.setId(rowId);
        return rowId;
    }


    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(History entity)
    {
        if (entity != null)
        {
            return entity.getId();
        }
        else
        {
            return null;
        }
    }


    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable()
    {
        return true;
    }

}
